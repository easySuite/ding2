<?php

/**
 * @file
 * Contains the Aleph Patron specific unit tests.
 */

use Drupal\ding_test\DingUnitTestBase;
use Drupal\aleph\Aleph\AlephClient;
use Drupal\aleph\Aleph\Handler\AlephUserHandler;

/**
 * Class AlephPatronUnitTest.
 */
class AlephPatronUnitTest extends DingUnitTestBase {

  private $client;
  private $userHandler;

  /**
   * Returns the unit test description.
   *
   * @return array
   *    The unit test description.
   */
  public static function getInfo() {
    return array(
      'name' => 'Aleph Patron',
      'description' => 'Unit-test that tests the Aleph Patron.',
      'group' => 'Ding! - Aleph unit tests',
      'dependencies' => array('ding_test'),
    );
  }

  /**
   * Parent sets up auto loading and our test-dependencies.
   */
  public function setUp() {
    parent::setUp();
    $this->client = new AlephClient('http://snorri.lb.is/X');
    $this->userHandler = new AlephUserHandler($this->client);
  }

  /**
   * Test a valid login.
   */
  public function testValidLogin() {
    $patron = $this->userHandler->getPatron('4004006985', 'test1');
    $this->assertTrue($patron->isAuthenticated());
  }

  /**
   * Test an invalid login.
   */
  public function testInvalidLogin() {
    $patron = $this->userHandler->getPatron('4004006985', 'invalid-pin');
    $this->assertFalse($patron->isAuthenticated());
  }

  /**
   * Test patron 3 should be blocked.
   */
  public function testBlockedPatron() {
    $patron = $this->userHandler->getPatron('4004006987', 'test3');
    $this->assertTrue($patron->isBlocked());
  }

  /**
   * Test patron 1 should not blocked.
   */
  public function testNonBlockedPatron() {
    $patron = $this->userHandler->getPatron('4004006985', 'test1');
    $this->assertFalse($patron->isBlocked());
  }

}
