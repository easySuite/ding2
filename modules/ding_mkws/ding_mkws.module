<?php
/**
 * @file
 * Represents main hooks implementations and other common functions.
 */

include_once 'ding_mkws.fields.inc';

/**
 * Implements hook_libraries_info().
 */
function ding_mkws_libraries_info() {
  $libraries = array();

  $libraries['pz2'] = array(
    'name' => 'Pazpar2 library',
    'vendor url' => 'http://www.indexdata.com/pazpar2/',
    'download url' => 'http://ftp.indexdata.dk/pub/pazpar2/pazpar2-1.12.5.tar.gz',
    'version callback' => 'ding_mkws_version_callback',
    'files' => array(
      'js' => array('pz2.js'),
    ),
  );

  return $libraries;
}

/**
 * Support function for detecting versions of library.
 *
 * @return bool
 *   Status of version detection.
 */
function ding_mkws_version_callback() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function ding_mkws_menu() {
  $items = array();

  $items['admin/config/ding/mkws'] = array(
    'title' => 'MKWS settings',
    'description' => 'Settings and defaults for MKWS implementation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_mkws_service_settings_form'),
    'access arguments' => array('administer MKWS settings'),
    'file' => 'ding_mkws.admin.inc',
  );

  $items['admin/config/ding/mkws/service'] = array(
    'title' => 'Service settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/ding/mkws/widget'] = array(
    'title' => 'MKWS Widget settings',
    'description' => 'Settings and defaults for MKWS widgets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_mkws_widget_settings_form'),
    'access arguments' => array('administer MKWS settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_mkws.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_mkws_permission() {
  return array(
    'administer MKWS settings' => array(
      'title' => t('Administer MKWS settings'),
      'description' => t('Perform administration tasks for MKWS.'),
    ),
  );
}

/**
 * Represents a wrapper for making backend request to service.
 *
 * @param string $command
 *   String representation of command.
 * @param array $settings
 *   Array of settings data.
 * @param string $action
 *   String representation of action.
 *
 * @return mixed
 *   Bool or object.
 *
 * @throws Exception.
 */
function _ding_mkws_request($command, $settings, $action = NULL) {
  if (empty($settings['user']) || empty($settings['password']) || empty($settings['url'])) {
    throw new Exception(t('Please configure mkdru !settings first.', array('!settings' => l(t('settings'), 'admin/config/ding/mkws'))));
  }

  switch ($command) {
    case 'auth':
      $data = array(
        'command' => $command,
        'action' => $action,
        'username' => $settings['user'],
        'password' => $settings['password'],
      );
      $url = url($settings['url'], array('query' => $data));
      $result = simplexml_load_file($url);
      if (!isset($result->status[0]) || (string) $result->status[0] != 'OK' || !isset($result['jsessionId'][0])) {
        return FALSE;
      }
      else {
        $sid = (string) $result['jsessionId'][0];
        cache_set('ding_mkws_sid', $sid, 'cache', time() + 60 * 60);
        return $sid;
      }
      break;

    default:
      $sid = cache_get('ding_mkws_sid');
      if (empty($sid)) {
        $sid = _ding_mkws_request('auth', $settings, 'login');
      }
      else {
        $sid = $sid->data;
      }

      $data = array(
        'command' => $command,
        'action' => $action,
      );

      $data = array_filter($data);
      $url = url($settings['url'], array('query' => $data));
      $context = stream_context_create(array('http' => array('header' => "Cookie:JSESSIONID={$sid}")));
      $xml = file_get_contents($url, FALSE, $context);
      $xml_result = simplexml_load_string($xml);

      return $xml_result;
  }
}

/**
 * Helper function for including all libraries and settings.
 */
function ding_mkws_include_all() {
  libraries_load('pz2');
  $settings = variable_get('ding_mkws_settings', array());
  $sid = cache_get('ding_mkws_sid');
  if (empty($sid)) {
    try {
      $sid = _ding_mkws_request('auth', $settings, 'login');
    }
    catch (Exception $ex) {
      watchdog_exception('ding mkws', $ex);
      drupal_set_message(t('Something goes wrong. Check reports for details.'));
    }
  }
  else {
    $sid = $sid->data;
  }

  $path = drupal_get_path('module', 'ding_mkws');
  drupal_add_js($path . '/js/ding_mkws.js', array(
    'type' => 'file',
    'scope' => 'footer',
    'defer' => FALSE,
    'preprocess' => TRUE,
  ));

  $settings['sid'] = $sid;
  drupal_add_js(array('ding_mkws' => $settings), 'setting');
}


/**
 * Implements hook_init().
 */
function ding_mkws_init() {
  ding_mkws_include_all();
}


/**
 * Helper function for getting and processing resources.
 */
function _ding_mkws_process_resources() {
  $settings = variable_get('ding_mkws_settings', array());
  try {
    $result = _ding_mkws_request('categories', $settings);
    $resources = array();
    foreach ($result->category as $resource) {
      $name = (string) $resource->categoryName;
      $resources[drupal_strtolower($name)] = $name;
    }
    return $resources;
  }
  catch (Exception $ex) {
    watchdog_exception('ding mkws', $ex);
    drupal_set_message(t('Something goes wrong. Check reports for details.'));
    return array();
  }
}
